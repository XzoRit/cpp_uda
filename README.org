* UDA Playground
** build files
Boost.Build and CMake build files are available.
*** Boost.Build
**** build an test all
#+BEGIN_SRC bash
b2 toolset=gcc,clang variant=debug,release
#+END_SRC
*** CMake
*** configure all
#+BEGIN_SRC bash
cmake --preset gcc && cmake --preset gccd && cmake --preset clang && cmake --preset clangd
#+END_SRC
*** build all
#+BEGIN_SRC bash
cmake --build --preset gcc && cmake --build --preset gccd && cmake --build --preset clang && cmake --build --preset clangd
#+END_SRC
*** test all
#+BEGIN_SRC bash
ctest --preset gcc && ctest --preset gccd && ctest --preset clang && ctest --preset clangd
#+END_SRC
** formatting
*** Clang-Format file is available.
#+BEGIN_SRC bash
# recursively format all source files
find ./ -type f -name '*.?pp' -exec clang-format -i {} \;
#+END_SRC
*** cmake-format configuration
see [[https://github.com/cheshirekow/cmake_format][cmake-format]]
#+BEGIN_SRC bash
# recursively format all cmake files
find . -type f -name 'CMakeLists.txt' -execdir cmake-format -i {} \;
#+END_SRC
** compile_comand.json
cmake is configured to produce a compile_comand.json.
Most tools expect it to be in the root directory of the project.
This is achieved by creating a link e.g.:
#+BEGIN_SRC bash
# assumes . is project root and
# cmake generated the build files into the folder named 'build'
ln -s build/clang/compile_commands.json
#+END_SRC
